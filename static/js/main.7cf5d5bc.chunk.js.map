{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["accessToken","SearchBar","className","placeholder","onChange","this","props","handleTermChange","onClick","onSearch","React","Component","Track","addTrack","bind","isRemoval","onRemove","track","id","onAdd","name","artist","album","renderAction","TrackList","tracks","map","SearchResults","searchResults","Playlist","handleNameChange","event","onNameChange","target","value","defaultValue","playlistTracks","onSave","redirectUri","Spotify","getAccessToken","console","log","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","state","playlistName","removeTrack","updatePlaylistName","updatePlayListName","setState","find","savedTrack","push","filter","currentTrack","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7cf5d5bc.chunk.js","sourcesContent":["const clientId='95674429470948d489e824172ca75ea6';\n// const redirectUri = 'http://localhost:3000/'; // Have to add this to your accepted Spotify redirect URIs on the Spotify API.\nconst redirectUri = process.env.NODE_ENV === 'development' ? 'http://localhost:3000/' : 'https://nmcconkey8.github.io/jamming/'; // Have to add this to your accepted Spotify redirect URIs on the Spotify API.\nlet accessToken;\n\nconst Spotify = {\n  getAccessToken() {\n    console.log(redirectUri);\n    if (accessToken) {\n      return accessToken;\n    }\n\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/'); // This clears the parameters, allowing us to grab a new access token when it expires.\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrl;\n    }\n  },\n   \n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artists[0].name,\n        album: track.album.name,\n        uri: track.uri\n      }));\n    });\n  },\n\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris.length) {\n      return;\n    }\n\n    const accessToken = Spotify.getAccessToken();\n    const headers = { Authorization: `Bearer ${accessToken}` };\n    let userId;\n\n    return fetch('https://api.spotify.com/v1/me', {headers: headers}\n    ).then(response => response.json()\n    ).then(jsonResponse => {\n      userId = jsonResponse.id;\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n        headers: headers,\n        method: 'POST',\n        body: JSON.stringify({name: name})\n      }).then(response => response.json()\n      ).then(jsonResponse => {\n        const playlistId = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({uris: trackUris})\n        });\n      });\n    });\n  }\n};\n\nexport default Spotify;\n","\nimport React from 'react';\nimport './SearchBar.css';\n\n\nclass SearchBar extends React.Component {\n    render() {\n        return(\n            <div className=\"SearchBar\">\n                <input placeholder=\"Enter A Song, Album, or Artist\" onChange={this.props.handleTermChange} />\n                <button className=\"SearchButton\" onClick={this.props.onSearch}>SEARCH</button>\n            </div>\n        )\n    }\n};\n\n\n\nexport default SearchBar","import React from 'react';\nimport './Track.css';\n\n\nclass Track extends React.Component {\n    constructor(props) {\n        super(props);\n        this.addTrack = this.addTrack.bind(this);\n    }\n\n    renderAction() {\n        if(this.props.isRemoval) {\n            return <button className=\"Track-action\" onClick={() => this.props.onRemove(this.props.track.id)}>-</button>\n        } else {\n           return <button className=\"Track-action\" onClick={this.addTrack}>+</button> \n        }\n    }\n    addTrack() {\n        this.props.onAdd(this.props.track)\n    }\n  \n    render() {\n        return(\n            <div className=\"Track\">\n                <div className=\"Track-information\">\n                 <h3>{this.props.track.name}</h3>\n                 <p>{this.props.track.artist} | {this.props.track.album}</p>\n                    </div>\n                     {this.renderAction()}\n                        </div>\n        )\n    }\n};\n\nexport default Track;","import React from \"react\";\nimport './TrackList.css';\nimport Track from '../Track/Track';\n\n\nclass TrackList extends React.Component {\n    render() {\n        return(\n            <div className=\"TrackList\">\n                {\n                    this.props.tracks.map(track => {\n                        return <Track track={track}\n                        key={track.id}\n                        onAdd={this.props.onAdd}\n                        onRemove={this.props.onRemove}\n                        isRemoval={this.props.isRemoval}\n                    \n                        />\n                    })\n                }\n            </div>\n        )\n    }\n}\n\n\nexport default TrackList;","\nimport React from 'react';\nimport './SearchResults.css';\nimport TrackList from '../TrackList/TrackList';\n\nclass SearchResults extends React.Component {\n    render() {\n        return(\n            <div className=\"SearchResults\">\n            <h2>Results</h2>\n        <TrackList tracks={this.props.searchResults} onAdd={this.props.onAdd}\n        isRemoval={false}/>\n            </div>  \n        )\n    }\n}\n\nexport default SearchResults;","import React from 'react';\nimport './Playlist.css';\nimport TrackList from '../TrackList/TrackList';\n\nclass Playlist extends React.Component {\n   constructor(props) {\n       super(props);\n       this.handleNameChange =this.handleNameChange.bind(this);\n   }\n   \n    handleNameChange(event) {\n        this.props.onNameChange(event.target.value);\n    }\n    render() {\n        return (\n            <div className=\"Playlist\">\n             <input defaultValue={\"New Playlist\"} onChange={this.handleNameChange}/>\n                <TrackList tracks={this.props.playlistTracks} onRemove={this.props.onRemove} isRemoval={true} />\n                    <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY </button>\n                        </div>\n        )\n    }\n}\n\nexport default Playlist;  ","\n\nimport React from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [],\n      playlistName: 'My Playlist',\n      playlistTracks: [],\n      term: '',\n    };\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlayListName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n    this.handleTermChange = this.handleTermChange.bind(this);\n  };\n\n  handleTermChange(event) {\n    this.setState({\n      ...this.state,\n      term: event.target.value\n    })\n}\n\n  search() {\n    console.log(this.state.term)\n    Spotify.search(this.state.term)\n    .then(searchResults => {\n      console.log(searchResults)\n      this.setState({\n        searchResults: searchResults\n      })\n    })\n  }\n\n  savePlaylist() {\n   const trackUris = this.state.playlistTracks.map(track => track.uri);\n   Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\n     this.setState({\n       playlistName: 'New Playlist',\n       playlistTracks: []\n     })\n   })\n  }\n\n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n    if (tracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    }\n    tracks.push(track);\n    this.setState({playlistTracks: tracks});\n  }\n  removeTrack(track) {\n    console.log(track)\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track);\n    this.setState({playlistTracks: tracks});\n  }\n  updatePlayListName(name) {\n    this.setState({playlistName: name});\n  }\n  render() {\n    return(\n      <div>\n  <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n  <div className=\"App\">\n    <SearchBar onSearch={this.search} handleTermChange={this.handleTermChange}/>\n    <div className=\"App-playlist\">\n      <SearchResults searchResults={this.state.searchResults} \n      onAdd={this.addTrack}\n      />\n      <Playlist tracks={this.state.searchResults} playlistName={this.state.playlistName}\n      playlistTracks={this.state.playlistTracks} onRemove={this.removeTrack}\n      onNameChange={this.updatePlaylistName} onSave={this.savePlaylist} \n      />\n    </div>\n  </div>\n</div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}